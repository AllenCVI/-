package com.kuxuan.sqlite.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kuxuan.sqlite.db.UserDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DB".
*/
public class UserDBDao extends AbstractDao<UserDB, Void> {

    public static final String TABLENAME = "USER_DB";

    /**
     * Properties of entity UserDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_id = new Property(0, int.class, "user_id", false, "USER_ID");
        public final static Property SyncTime = new Property(1, long.class, "syncTime", false, "SYNC_TIME");
    }


    public UserDBDao(DaoConfig config) {
        super(config);
    }
    
    public UserDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DB\" (" + //
                "\"USER_ID\" INTEGER NOT NULL UNIQUE ," + // 0: user_id
                "\"SYNC_TIME\" INTEGER NOT NULL );"); // 1: syncTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUser_id());
        stmt.bindLong(2, entity.getSyncTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUser_id());
        stmt.bindLong(2, entity.getSyncTime());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UserDB readEntity(Cursor cursor, int offset) {
        UserDB entity = new UserDB( //
            cursor.getInt(offset + 0), // user_id
            cursor.getLong(offset + 1) // syncTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDB entity, int offset) {
        entity.setUser_id(cursor.getInt(offset + 0));
        entity.setSyncTime(cursor.getLong(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UserDB entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UserDB entity) {
        return null;
    }

    @Override
    public boolean hasKey(UserDB entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
