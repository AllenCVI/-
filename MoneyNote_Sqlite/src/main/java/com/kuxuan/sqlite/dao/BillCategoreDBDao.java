package com.kuxuan.sqlite.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kuxuan.sqlite.db.BillCategoreDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BILL_CATEGORE_DB".
*/
public class BillCategoreDBDao extends AbstractDao<BillCategoreDB, Void> {

    public static final String TABLENAME = "BILL_CATEGORE_DB";

    /**
     * Properties of entity BillCategoreDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", false, "ID");
        public final static Property Category_type = new Property(1, int.class, "category_type", false, "CATEGORY_TYPE");
        public final static Property Icon = new Property(2, String.class, "icon", false, "ICON");
        public final static Property Selected_icon = new Property(3, String.class, "selected_icon", false, "SELECTED_ICON");
        public final static Property Detail_icon = new Property(4, String.class, "detail_icon", false, "DETAIL_ICON");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
    }


    public BillCategoreDBDao(DaoConfig config) {
        super(config);
    }
    
    public BillCategoreDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL_CATEGORE_DB\" (" + //
                "\"ID\" INTEGER NOT NULL UNIQUE ," + // 0: id
                "\"CATEGORY_TYPE\" INTEGER NOT NULL ," + // 1: category_type
                "\"ICON\" TEXT," + // 2: icon
                "\"SELECTED_ICON\" TEXT," + // 3: selected_icon
                "\"DETAIL_ICON\" TEXT," + // 4: detail_icon
                "\"NAME\" TEXT," + // 5: name
                "\"TYPE\" INTEGER NOT NULL );"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL_CATEGORE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BillCategoreDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getCategory_type());
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(3, icon);
        }
 
        String selected_icon = entity.getSelected_icon();
        if (selected_icon != null) {
            stmt.bindString(4, selected_icon);
        }
 
        String detail_icon = entity.getDetail_icon();
        if (detail_icon != null) {
            stmt.bindString(5, detail_icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
        stmt.bindLong(7, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BillCategoreDB entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getCategory_type());
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(3, icon);
        }
 
        String selected_icon = entity.getSelected_icon();
        if (selected_icon != null) {
            stmt.bindString(4, selected_icon);
        }
 
        String detail_icon = entity.getDetail_icon();
        if (detail_icon != null) {
            stmt.bindString(5, detail_icon);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
        stmt.bindLong(7, entity.getType());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BillCategoreDB readEntity(Cursor cursor, int offset) {
        BillCategoreDB entity = new BillCategoreDB( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // category_type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // icon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // selected_icon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // detail_icon
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.getInt(offset + 6) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BillCategoreDB entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCategory_type(cursor.getInt(offset + 1));
        entity.setIcon(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSelected_icon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDetail_icon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BillCategoreDB entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BillCategoreDB entity) {
        return null;
    }

    @Override
    public boolean hasKey(BillCategoreDB entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
